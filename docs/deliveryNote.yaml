openapi: 3.0.0
info:
  title: Delivery Notes API – Delivery Notes
  version: 1.0.0

tags:
  - name: DeliveryNote
    description: Work / materials delivery notes

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    DeliveryNote:
      type: object
      properties:
        id:          { type: integer }
        user_id:     { type: integer }
        client_id:   { type: integer }
        project_id:  { type: integer }
        signed:      { type: boolean }
        signature_url:
          type: string
          nullable: true
          example: ipfs://bafy…/signature.png
        pdf_url:
          type: string
          nullable: true
          example: ipfs://bafy…/note.pdf
        created_at:
          type: string
          format: date-time

paths:

  #######################################################################
  # 1. CREATE  + 2. LIST  (оба метода под одним ключом)                 #
  #######################################################################
  /api/deliverynote:
    post:
      tags: [ DeliveryNote ]
      summary: Create delivery note
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ project_id, items ]
              properties:
                project_id: { type: integer, example: 3 }
                items:
                  type: array
                  minItems: 1
                  items:
                    type: object
                    required: [ type, description, quantity, unit_price ]
                    properties:
                      type:        { type: string, enum: [hour, material] }
                      description: { type: string,  example: UI design }
                      quantity:    { type: number,  example: 8 }
                      unit_price:  { type: number,  example: 50 }
      responses:
        '201':
          description: Note created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Delivery note created }
                  noteId:  { type: integer }
        '400': { description: project_id or items invalid }
        '404': { description: Project not found / not yours }
        '401': { description: Unauthorized }
        '500': { description: Server error }

    get:
      tags: [ DeliveryNote ]
      summary: List my delivery notes
      description: |
        Returns every delivery note (not deleted) that belongs to the authenticated
        user or to the user’s company.  
        The response also includes the linked project and client names for convenience.
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Array of delivery notes
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/DeliveryNote' }
        '401': { description: Unauthorized – missing or invalid JWT }
        '500': { description: Server error }

  #######################################################################
  # 3. GET / DELETE by ID                                               #
  #######################################################################
  /api/deliverynote/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }
        description: Delivery-note ID

    get:
      tags: [ DeliveryNote ]
      summary: Get delivery note by ID
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: The requested delivery note
          content:
            application/json:
              schema: { $ref: '#/components/schemas/DeliveryNote' }
        '401': { description: Unauthorized }
        '404': { description: Delivery note not found or not yours }
        '500': { description: Server error }

    delete:
      tags: [ DeliveryNote ]
      summary: Delete delivery note (only if not signed)
      description: Physically removes the note; allowed while **signed = false**.
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Note deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Delivery note deleted successfully }
        '400': { description: Not found or already signed }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  #######################################################################
  # 4. SIGN                                                             #
  #######################################################################
  /api/deliverynote/{id}/sign:
    post:
      tags: [ DeliveryNote ]
      summary: Sign delivery note
      description: |
        Uploads a signature image, marks the note as **signed = true**,  
        generates a PDF and optionally uploads both assets to IPFS.
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: storage
          schema:
            type: string
            enum: [ ipfs, local ]
            default: ipfs
          description: Where to store signature & PDF
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required: [ signature ]
              properties:
                signature:
                  type: string
                  format: binary
      responses:
        '200':
          description: Note signed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:      { type: string, example: Note signed successfully }
                  signatureUrl: { type: string, example: ipfs://bafy…/sig.png }
                  pdfUrl:
                    type: string
                    nullable: true
                    example: ipfs://bafy…/note.pdf
        '400': { description: Image missing / note already signed }
        '401': { description: Unauthorized }
        '404': { description: Note not found or not yours }
        '500': { description: Server error }

  #######################################################################
  # 5. PDF                                                              #
  #######################################################################
  /api/deliverynote/pdf/{id}:
    get:
      tags: [ DeliveryNote ]
      summary: Get delivery note PDF
      description: |
        Returns the PDF either from IPFS (302 redirect) or generates it on-the-fly.  
        Use **storage=local** to force local generation, **storage=ipfs** to (re)upload.
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
        - in: query
          name: storage
          schema:
            type: string
            enum: [ auto, ipfs, local ]
            default: auto
      responses:
        '200': { description: Streamed PDF (local generation) }
        '302': { description: Redirect to IPFS gateway }
        '404': { description: Note not found or access denied }
        '401': { description: Unauthorized }
        '500': { description: Generation error }