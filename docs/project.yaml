openapi: 3.0.0
info:
  title: Delivery Notes API â€“ Projects
  version: 1.0.0

tags:
  - name: Project
    description: CRUD operations for projects

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    Project:
      type: object
      properties:
        id:          { type: integer }
        user_id:     { type: integer }
        client_id:   { type: integer }
        name:        { type: string }
        description: { type: string, nullable: true }
        is_deleted:  { type: boolean }
        created_at:
          type: string
          format: date-time

paths:

  /api/project:
    post:
      tags: [ Project ]
      summary: Create a new project
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ client_id, name ]
              properties:
                client_id:   { type: integer, example: 5 }
                name:        { type: string,  example: Website Redesign }
                description: { type: string,  example: Full UI/UX overhaul }
      responses:
        '201': { description: Project created,
                 content: { application/json: { schema: { $ref: '#/components/schemas/Project' } } } }
        '400': { description: client_id or name missing }
        '401': { description: Unauthorized }
        '404': { description: Client not found / not yours }
        '500': { description: Server error }

    get:
      tags: [ Project ]
      summary: List my projects
      description: Returns all non-archived projects owned by the authenticated user.
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Array of projects
          content:
            application/json:
              schema:
                type: array
                items: { $ref: '#/components/schemas/Project' }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/project/{id}:
    parameters:
      - in: path
        name: id
        required: true
        schema: { type: integer }

    get:
      tags: [ Project ]
      summary: Get project by ID
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Requested project
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Project' }
        '401': { description: Unauthorized }
        '404': { description: Project not found or not yours }
        '500': { description: Server error }

    put:
      tags: [ Project ]
      summary: Update a project
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ name ]
              properties:
                name:        { type: string, example: New Website }
                description: { type: string, example: Phase 2 scope }
      responses:
        '200': { description: Updated project,
                 content: { application/json: { schema: { $ref: '#/components/schemas/Project' } } } }
        '400': { description: Project name is required }
        '401': { description: Unauthorized }
        '404': { description: Project not found or not yours }
        '500': { description: Server error }

    delete:
      tags: [ Project ]
      summary: Permanently delete project
      description: Hard-delete (removes the record from DB).
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Project deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Project permanently deleted }
        '401': { description: Unauthorized }
        '404': { description: Project not found or not yours }
        '500': { description: Server error }

  /api/project/{id}/archive:
    patch:
      tags: [ Project ]
      summary: Archive project (soft delete)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Project archived
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Project archived successfully }
                  project: { $ref: '#/components/schemas/Project' }
        '401': { description: Unauthorized }
        '404': { description: Project not found or already archived }
        '500': { description: Server error }

  /api/project/{id}/restore:
    patch:
      tags: [ Project ]
      summary: Restore archived project
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: path
          name: id
          required: true
          schema: { type: integer }
      responses:
        '200':
          description: Project restored
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string, example: Project restored successfully }
                  project: { $ref: '#/components/schemas/Project' }
        '401': { description: Unauthorized }
        '404': { description: Project not found or not archived }
        '500': { description: Server error }