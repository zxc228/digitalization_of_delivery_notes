openapi: 3.0.0
info:
  title: Delivery Notes API – Users
  version: 1.0.0

tags:
  - name: User
    description: Authentication / profile / admin actions

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  schemas:
    UserPublic:
      type: object
      properties:
        id:     { type: integer }
        email:  { type: string, format: email }
        status: { type: integer, description: 1 = validated, 0 = pending }
        role:   { type: string }
    Summary:
      type: object
      properties:
        numActiveUsers:        { type: integer }
        numDeletedUsers:       { type: integer }
        numInactiveUsers:      { type: integer }
        numActiveCompanyUsers: { type: integer }
        numActivePersonalUsers:{ type: integer }

paths:

  /api/user/register:
    post:
      tags: [ User ]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ email, password ]
              properties:
                email:    { type: string, format: email }
                password: { type: string, minLength: 8 }
      responses:
        '200':
          description: User registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:  { $ref: '#/components/schemas/UserPublic' }
        '422': { description: Invalid email / password }
        '409': { description: User already exists }
        '500': { description: Server error }

    put:
      tags: [ User ]
      summary: Onboarding – update personal / company data
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ name, surnames, nif ]
              properties:
                name:         { type: string }
                surnames:     { type: string }
                nif:          { type: string }
                company_name: { type: string }
                cif:          { type: string }
                address:      { type: string }
                selfEmployed: { type: boolean }
      responses:
        '200':
          description: Data updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message: { type: string }
        '401': { description: Unauthorized }
        '422': { description: Required fields missing }
        '500': { description: Server error }

  /api/user/validate:
    put:
      tags: [ User ]
      summary: Validate email (6-digit code)
      security: [ { bearerAuth: [] } ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ code ]
              properties:
                code: { type: string, example: "123456" }
      responses:
        '200': { description: Email validated }
        '400': { description: Incorrect or expired code }
        '422': { description: Wrong code format }
        '500': { description: Server error }

  /api/user/login:
    post:
      tags: [ User ]
      summary: Log in
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ email, password ]
              properties:
                email:    { type: string }
                password: { type: string }
      responses:
        '200':
          description: Logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token: { type: string }
                  user:  { $ref: '#/components/schemas/UserPublic' }
        '401': { description: Wrong password }
        '403': { description: Email not validated }
        '404': { description: User not found }
        '422': { description: Bad input }
        '500': { description: Server error }

  /api/user/recover-password:
    post:
      tags: [ User ]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ email ]
              properties:
                email: { type: string, format: email }
      responses:
        '200':
          description: Reset token issued
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:    { type: string }
                  resetToken: { type: string }
        '404': { description: User not found }
        '422': { description: Invalid email }
        '500': { description: Server error }

  /api/user/reset-password:
    post:
      tags: [ User ]
      summary: Reset password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [ token, new_password ]
              properties:
                token:        { type: string }
                new_password: { type: string, minLength: 8 }
      responses:
        '200': { description: Password reset successful }
        '404': { description: Invalid / expired token }
        '422': { description: Invalid input }
        '500': { description: Server error }

  /api/user/me:
    parameters: []
    get:
      tags: [ User ]
      summary: Get my profile
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Current user
          content:
            application/json:
              schema: { $ref: '#/components/schemas/UserPublic' }
        '401': { description: Unauthorized }
        '404': { description: User not found }
        '500': { description: Server error }

    delete:
      tags: [ User ]
      summary: Delete my account (soft or hard)
      security: [ { bearerAuth: [] } ]
      parameters:
        - in: query
          name: soft
          schema: { type: boolean, default: true }
          description: true = soft delete; false = hard delete
      responses:
        '200': { description: Account deleted }
        '401': { description: Unauthorized }
        '500': { description: Server error }

  /api/user/summary:
    get:
      tags: [ User ]
      summary: Dashboard summary
      security: [ { bearerAuth: [] } ]
      responses:
        '200':
          description: Summary stats
          content:
            application/json:
              schema: { $ref: '#/components/schemas/Summary' }
        '401': { description: Unauthorized }
        '500': { description: Server error }