paths:
  /api/user/register:
    post:
      tags:
        - User
      summary: Register a new user
      description: Creates a new user account and returns a JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 8
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                      email:
                        type: string
                      status:
                        type: integer
                      role:
                        type: string
        '422':
          description: Invalid input
        '409':
          description: User already exists
        '500':
          description: Server error
    put:
      tags:
        - User
      summary: Onboarding - update personal and/or company data
      description: Updates the personal user profile. Optionally adds company data or marks user as self-employed.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - name
                - surnames
                - nif
              properties:
                name:
                  type: string
                surnames:
                  type: string
                nif:
                  type: string
                company_name:
                  type: string
                cif:
                  type: string
                address:
                  type: string
                selfEmployed:
                  type: boolean
      responses:
        '200':
          description: Personal and/or company data updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '401':
          description: Unauthorized
        '422':
          description: Missing required personal fields
        '500':
          description: Server error

  /api/user/validate:
    put:
      tags:
        - User
      summary: Validate email with 6-digit code
      description: Validates the email using a 6-digit code received after registration
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - code
              properties:
                code:
                  type: string
                  example: "123456"
      responses:
        '200':
          description: Email validated successfully
        '400':
          description: Incorrect or expired code
        '422':
          description: Code format invalid
        '500':
          description: Server error

  /api/user/login:
    post:
      tags:
        - User
      summary: Log in a user
      description: Authenticates a user and returns a JWT token if credentials are valid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: User logged in successfully
        '401':
          description: Incorrect password
        '403':
          description: Email not validated
        '404':
          description: User not found
        '422':
          description: Invalid input format
        '500':
          description: Server error

  /api/user/recover-password:
    post:
      tags:
        - User
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
              properties:
                email:
                  type: string
      responses:
        '200':
          description: Reset token generated
        '404':
          description: User not found
        '422':
          description: Invalid email format
        '500':
          description: Server error

  /api/user/reset-password:
    post:
      tags:
        - User
      summary: Reset user password with token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - token
                - new_password
              properties:
                token:
                  type: string
                new_password:
                  type: string
      responses:
        '200':
          description: Password reset successful
        '404':
          description: Invalid or expired token
        '422':
          description: Input format invalid
        '500':
          description: Server error

  /api/user/me:
    get:
      tags:
        - User
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Current user data
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Server error
    delete:
      tags:
        - User
      summary: Delete current user (soft or hard)
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: soft
          schema:
            type: boolean
            default: true
      responses:
        '200':
          description: User deleted successfully
        '401':
          description: Unauthorized
        '500':
          description: Server error

  /api/user/summary:
    get:
      tags:
        - User
      summary: Get dashboard summary
      description: Statistics about user types
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Dashboard summary data
        '401':
          description: Unauthorized
        '500':
          description: Server error

